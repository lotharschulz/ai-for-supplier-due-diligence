{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "bb514fe3-60ac-451e-8ad6-bf779929c7be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in ./.venv/lib/python3.12/site-packages (2.2.3)\n",
      "Requirement already satisfied: pyexcel in ./.venv/lib/python3.12/site-packages (0.7.1)\n",
      "Requirement already satisfied: pyexcel-ods in ./.venv/lib/python3.12/site-packages (0.6.0)\n",
      "Requirement already satisfied: pyexcel-xlsx in ./.venv/lib/python3.12/site-packages (0.6.0)\n",
      "Requirement already satisfied: openpyxl in ./.venv/lib/python3.12/site-packages (3.1.5)\n",
      "Requirement already satisfied: numpy>=1.26.0 in ./.venv/lib/python3.12/site-packages (from pandas) (2.2.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in ./.venv/lib/python3.12/site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in ./.venv/lib/python3.12/site-packages (from pandas) (2024.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in ./.venv/lib/python3.12/site-packages (from pandas) (2024.2)\n",
      "Requirement already satisfied: lml>=0.0.4 in ./.venv/lib/python3.12/site-packages (from pyexcel) (0.1.0)\n",
      "Requirement already satisfied: pyexcel-io>=0.6.2 in ./.venv/lib/python3.12/site-packages (from pyexcel) (0.6.7)\n",
      "Requirement already satisfied: texttable>=0.8.2 in ./.venv/lib/python3.12/site-packages (from pyexcel) (1.7.0)\n",
      "Requirement already satisfied: odfpy>=1.3.5 in ./.venv/lib/python3.12/site-packages (from pyexcel-ods) (1.4.1)\n",
      "Requirement already satisfied: et-xmlfile in ./.venv/lib/python3.12/site-packages (from openpyxl) (2.0.0)\n",
      "Requirement already satisfied: defusedxml in ./.venv/lib/python3.12/site-packages (from odfpy>=1.3.5->pyexcel-ods) (0.7.1)\n",
      "Requirement already satisfied: six>=1.5 in ./.venv/lib/python3.12/site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install pandas pyexcel pyexcel-ods pyexcel-xlsx openpyxl\n",
    "\n",
    "# Import required libraries\n",
    "import pandas as pd\n",
    "from pyexcel_ods import get_data\n",
    "import os\n",
    "\n",
    "# Helper function to load the file into a DataFrame\n",
    "def load_file(file_path):\n",
    "    ext = os.path.splitext(file_path)[-1].lower()\n",
    "    if ext == \".tsv\":\n",
    "        return pd.read_csv(file_path, sep='\\t')\n",
    "    elif ext == \".xlsx\":\n",
    "        return pd.read_excel(file_path)\n",
    "    elif ext == \".ods\":\n",
    "        data = get_data(file_path)\n",
    "        sheet = list(data.keys())[0]  # Use the first sheet\n",
    "        df = pd.DataFrame(data[sheet][1:], columns=data[sheet][0])\n",
    "        return df\n",
    "    else:\n",
    "        raise ValueError(f\"Unsupported file type: {ext}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "1122ca7d-3c37-4de1-a6bc-c5aac7d3fd36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Questions:\n",
      "                               Question\n",
      "0  Is the supplier ISO 27001 certified?\n",
      "1       Is the supplier SOC2 certified?\n",
      "Context:\n",
      "                                           Resources\n",
      "0  https://sentry.io/legal/dpa/5.1.0/in-app/?user...\n",
      "1                        https://sentry.io/security/\n",
      "2  https://sentry.io/legal/terms/3.0.0/in-app/?us...\n"
     ]
    }
   ],
   "source": [
    "# Load supplier questions\n",
    "questions_file = './supplier_questions.tsv'  # Change to your file path\n",
    "questions_df = load_file(questions_file)\n",
    "print(f\"Questions:\\n{questions_df.head()}\")\n",
    "\n",
    "# Load context resources\n",
    "context_file = './context.tsv'  # Change to your file path\n",
    "context_df = load_file(context_file)\n",
    "print(f\"Context:\\n{context_df.head()}\")\n",
    "\n",
    "# Concatenate questions and resources\n",
    "concatenated_questions = \"\\n\".join(str(question) for question in questions_df['Question'])\n",
    "concatenated_resources = \"\\n\".join(str(res) for res in context_df['Resources'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "a13064ae-885b-4953-a92e-10cbbd08e74e",
   "metadata": {},
   "outputs": [],
   "source": [
    "base_prompts = \"\"\"\n",
    "Below is a list of questions and resources.\n",
    "Please answer the questions based on the resources provided:\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "302166b7-c5c7-47e2-9146-cf68dadf5d1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "prompt:\n",
      "\n",
      "Below is a list of questions and resources.\n",
      "Please answer the questions based on the resources provided:\n",
      "\n",
      "Questions:\n",
      "Is the supplier ISO 27001 certified?\n",
      "Is the supplier SOC2 certified?\n",
      "\n",
      "Resources:\n",
      "https://sentry.io/legal/dpa/5.1.0/in-app/?userCurrentVersion=5.1.0\n",
      "https://sentry.io/security/\n",
      "https://sentry.io/legal/terms/3.0.0/in-app/?userCurrentVersion=3.0.1\n"
     ]
    }
   ],
   "source": [
    "prompt = f\"{base_prompt}\\nQuestions:\\n{concatenated_questions}\\n\\nResources:\\n{concatenated_resources}\"\n",
    "print(f\"prompt:\\n{prompt}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "a6be3079-5880-4b45-a7e4-de4cb2f82ce1",
   "metadata": {},
   "outputs": [],
   "source": [
    "add_notes = \"additional notes\"\n",
    "url_resources = \"URL resources\"\n",
    "\n",
    "anthropic_system = f\"\"\"\n",
    "You're an ISO leading a compliance team seeking information about a potential future supplier. \n",
    "Your team is asked to perform a compliance due diligence. \n",
    "Respond in short and clear explanations. \n",
    "Please include {add_notes} and {url_resources} if available.\n",
    "In case you can share {add_notes}, please add '{add_notes}:\\n' as headline for the {add_notes} section.\n",
    "In case you can share {url_resources}, please add '{url_resources}:\\n' as headline for the {url_resources} section.\n",
    "Don't be lazy!\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "a6bcdd18-6960-4c22-a262-85c3c45b5d3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: anthropic in ./.venv/lib/python3.12/site-packages (0.42.0)\n",
      "Requirement already satisfied: anyio<5,>=3.5.0 in ./.venv/lib/python3.12/site-packages (from anthropic) (4.7.0)\n",
      "Requirement already satisfied: distro<2,>=1.7.0 in ./.venv/lib/python3.12/site-packages (from anthropic) (1.9.0)\n",
      "Requirement already satisfied: httpx<1,>=0.23.0 in ./.venv/lib/python3.12/site-packages (from anthropic) (0.28.1)\n",
      "Requirement already satisfied: jiter<1,>=0.4.0 in ./.venv/lib/python3.12/site-packages (from anthropic) (0.8.2)\n",
      "Requirement already satisfied: pydantic<3,>=1.9.0 in ./.venv/lib/python3.12/site-packages (from anthropic) (2.10.4)\n",
      "Requirement already satisfied: sniffio in ./.venv/lib/python3.12/site-packages (from anthropic) (1.3.1)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.10 in ./.venv/lib/python3.12/site-packages (from anthropic) (4.12.2)\n",
      "Requirement already satisfied: idna>=2.8 in ./.venv/lib/python3.12/site-packages (from anyio<5,>=3.5.0->anthropic) (3.10)\n",
      "Requirement already satisfied: certifi in ./.venv/lib/python3.12/site-packages (from httpx<1,>=0.23.0->anthropic) (2024.12.14)\n",
      "Requirement already satisfied: httpcore==1.* in ./.venv/lib/python3.12/site-packages (from httpx<1,>=0.23.0->anthropic) (1.0.7)\n",
      "Requirement already satisfied: h11<0.15,>=0.13 in ./.venv/lib/python3.12/site-packages (from httpcore==1.*->httpx<1,>=0.23.0->anthropic) (0.14.0)\n",
      "Requirement already satisfied: annotated-types>=0.6.0 in ./.venv/lib/python3.12/site-packages (from pydantic<3,>=1.9.0->anthropic) (0.7.0)\n",
      "Requirement already satisfied: pydantic-core==2.27.2 in ./.venv/lib/python3.12/site-packages (from pydantic<3,>=1.9.0->anthropic) (2.27.2)\n",
      "Requirement already satisfied: python-dotenv in ./.venv/lib/python3.12/site-packages (1.0.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install anthropic\n",
    "!pip install python-dotenv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "6b219eb1-e5ba-4b75-898f-cdddf6fbe6cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "load_dotenv()\n",
    "api_key = os.getenv('ANTHROPIC_API_KEY')\n",
    "if api_key is None:\n",
    "    raise ValueError(\"The 'ANTHROPIC_API_KEY' environment variable is not set.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "3316db2f-5975-4fd6-8c69-a81d185e5a67",
   "metadata": {},
   "outputs": [],
   "source": [
    "import anthropic\n",
    "client = anthropic.Anthropic()\n",
    "\n",
    "def ask(prompt):\n",
    "    response = client.messages.create(\n",
    "        model=\"claude-3-5-sonnet-latest\",\n",
    "        max_tokens=2000,\n",
    "        temperature=0.0,\n",
    "        system=anthropic_system,\n",
    "        messages=[{\"role\": \"user\", \"content\": prompt}]\n",
    "    )\n",
    "    # Extract and return the text content\n",
    "    if response.content:\n",
    "        text_response = response.content[0].text  # Assuming `response.content` is a list with a `TextBlock`\n",
    "        return text_response\n",
    "    else:\n",
    "        print(\"Empty response.content\")\n",
    "        return \"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "fbe9d72c-e509-48a4-ae8f-0a5480a63ee5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------/Claude's answers ----------------:\n",
      " Based on the provided resources:\n",
      "\n",
      "ISO 27001: Yes, Sentry is ISO 27001:2013 certified.\n",
      "\n",
      "SOC2: Yes, Sentry maintains SOC 2 Type II certification.\n",
      "\n",
      "Additional notes:\n",
      "- Sentry's certifications are verified annually\n",
      "- Their security program is built on ISO 27001 framework\n",
      "- They maintain both SOC 2 Type I and Type II reports\n",
      "- The certifications cover their error monitoring and performance monitoring services\n",
      "- Their security practices include regular third-party audits and penetration testing\n",
      "\n",
      "URL resources:\n",
      "- Security overview: https://sentry.io/security/\n",
      "- Detailed security documentation: https://develop.sentry.dev/security/\n",
      "- Trust portal (requires login): https://sentry.io/trust/\n",
      "---------------/end of Claude's answers ----------------\n",
      "\n",
      "\n",
      "\n",
      "Claude's answers saved to: claude_answers.txt\n",
      "Results saved to: QandA.tsv, QandA.xlsx, QandA.ods\n"
     ]
    }
   ],
   "source": [
    "res = None\n",
    "try:\n",
    "    res = ask(prompt)\n",
    "    if not res.strip():  # Handle empty responses\n",
    "        print(\"Empty response, exiting.\")\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Exception occurred: {e}\")\n",
    "    print(f\"Exception type: {type(e)}\")\n",
    "\n",
    "if res is not None:\n",
    "    \n",
    "    print(f\"---------------/Claude's answers ----------------:\\n {str(res)}\\n---------------/end of Claude's answers ----------------\\n\\n\\n\")\n",
    "    \n",
    "    # Define the file path for saving the raw result\n",
    "    raw_result_file = \"claude_answers.txt\"\n",
    "    \n",
    "    # Save the raw result to the text file\n",
    "    with open(raw_result_file, 'w', encoding='utf-8') as file:\n",
    "        file.write(res)  # Write the raw result to the file\n",
    "    \n",
    "    print(f\"Claude's answers saved to: {raw_result_file}\")\n",
    "    \n",
    "    response_lines = res.split(\"\\n\")\n",
    "    answers = {}\n",
    "    answer_cntr = 0\n",
    "    \n",
    "    # Parse responses\n",
    "    for line in response_lines:\n",
    "        #print(f\"line: {str(line)}\")\n",
    "        if \":\" in line:\n",
    "            #print(f\"line with ':' : {str(line)}\")\n",
    "            key, value = line.split(\":\", 1)\n",
    "            #print(f\"key: {str(key.strip())}\")\n",
    "            #print(f\"value: {str(value.strip())}\")\n",
    "            if key == add_notes or key == url_resources:\n",
    "                pass\n",
    "            elif value.strip() != \"\" and answer_cntr < len(questions_df['Question']):\n",
    "                answers[key.strip()] = value.strip()\n",
    "                answer_cntr += 1\n",
    "    \n",
    "    # Build output DataFrame\n",
    "    output_data = {\n",
    "        \"Question\": concatenated_questions.split(\"\\n\"),\n",
    "        \"Answer\": list(answers.values())\n",
    "    }\n",
    "    output_df = pd.DataFrame(output_data)\n",
    "    \n",
    "    output_tsv = \"QandA.tsv\"\n",
    "    output_excel = \"QandA.xlsx\"\n",
    "    output_ods = \"QandA.ods\"\n",
    "    \n",
    "    # Save to TSV, Excel, and ODT\n",
    "    output_df.to_csv(output_tsv, sep='\\t', index=False)\n",
    "    output_df.to_excel(output_excel, index=False)\n",
    "    output_df.to_csv(output_ods, sep='\\t', index=False)  # Use ODS-specific library if needed\n",
    "\n",
    "    \n",
    "    print(f\"Results saved to: {output_tsv}, {output_excel}, {output_ods}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5289cc68-de53-42cc-a682-0851bd68aa34",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24579cfb-967e-4d03-889a-d4a7223ae690",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
